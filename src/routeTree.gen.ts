/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/_auth'

// Create Virtual Routes

const AuthIndexLazyImport = createFileRoute('/_auth/')()
const AuthSubscriptionsLazyImport = createFileRoute('/_auth/subscriptions')()
const AuthSettingsLazyImport = createFileRoute('/_auth/settings')()
const AuthNewInvoiceLazyImport = createFileRoute('/_auth/new-invoice')()

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexLazyRoute = AuthIndexLazyImport.update({
  path: '/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth.index.lazy').then((d) => d.Route))

const AuthSubscriptionsLazyRoute = AuthSubscriptionsLazyImport.update({
  path: '/subscriptions',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.subscriptions.lazy').then((d) => d.Route),
)

const AuthSettingsLazyRoute = AuthSettingsLazyImport.update({
  path: '/settings',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.settings.lazy').then((d) => d.Route),
)

const AuthNewInvoiceLazyRoute = AuthNewInvoiceLazyImport.update({
  path: '/new-invoice',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.new-invoice.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/new-invoice': {
      id: '/_auth/new-invoice'
      path: '/new-invoice'
      fullPath: '/new-invoice'
      preLoaderRoute: typeof AuthNewInvoiceLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/settings': {
      id: '/_auth/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthSettingsLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/subscriptions': {
      id: '/_auth/subscriptions'
      path: '/subscriptions'
      fullPath: '/subscriptions'
      preLoaderRoute: typeof AuthSubscriptionsLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexLazyImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  AuthRoute: AuthRoute.addChildren({
    AuthNewInvoiceLazyRoute,
    AuthSettingsLazyRoute,
    AuthSubscriptionsLazyRoute,
    AuthIndexLazyRoute,
  }),
  LoginRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/login"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/new-invoice",
        "/_auth/settings",
        "/_auth/subscriptions",
        "/_auth/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_auth/new-invoice": {
      "filePath": "_auth.new-invoice.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/settings": {
      "filePath": "_auth.settings.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/subscriptions": {
      "filePath": "_auth.subscriptions.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth.index.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
